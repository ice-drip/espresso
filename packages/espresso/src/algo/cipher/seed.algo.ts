// eslint-disable-next-line eslint-comments/disable-enable-pair
/* eslint-disable unicorn/prefer-math-trunc,jsdoc/require-jsdoc */

import { BlockCipher } from "../../core/cipher/block-cipher";

const SEED_SS: number[][] = [
  [
    0x29_89_a1_a8, 0x05_85_81_84, 0x16_c6_d2_d4, 0x13_c3_d3_d0, 0x14_44_50_54,
    0x1d_0d_11_1c, 0x2c_8c_a0_ac, 0x25_05_21_24, 0x1d_4d_51_5c, 0x03_43_43_40,
    0x18_08_10_18, 0x1e_0e_12_1c, 0x11_41_51_50, 0x3c_cc_f0_fc, 0x0a_ca_c2_c8,
    0x23_43_63_60, 0x28_08_20_28, 0x04_44_40_44, 0x20_00_20_20, 0x1d_8d_91_9c,
    0x20_c0_e0_e0, 0x22_c2_e2_e0, 0x08_c8_c0_c8, 0x17_07_13_14, 0x25_85_a1_a4,
    0x0f_8f_83_8c, 0x03_03_03_00, 0x3b_4b_73_78, 0x3b_8b_b3_b8, 0x13_03_13_10,
    0x12_c2_d2_d0, 0x2e_ce_e2_ec, 0x30_40_70_70, 0x0c_8c_80_8c, 0x3f_0f_33_3c,
    0x28_88_a0_a8, 0x32_02_32_30, 0x1d_cd_d1_dc, 0x36_c6_f2_f4, 0x34_44_70_74,
    0x2c_cc_e0_ec, 0x15_85_91_94, 0x0b_0b_03_08, 0x17_47_53_54, 0x1c_4c_50_5c,
    0x1b_4b_53_58, 0x3d_8d_b1_bc, 0x01_01_01_00, 0x24_04_20_24, 0x1c_0c_10_1c,
    0x33_43_73_70, 0x18_88_90_98, 0x10_00_10_10, 0x0c_cc_c0_cc, 0x32_c2_f2_f0,
    0x19_c9_d1_d8, 0x2c_0c_20_2c, 0x27_c7_e3_e4, 0x32_42_72_70, 0x03_83_83_80,
    0x1b_8b_93_98, 0x11_c1_d1_d0, 0x06_86_82_84, 0x09_c9_c1_c8, 0x20_40_60_60,
    0x10_40_50_50, 0x23_83_a3_a0, 0x2b_cb_e3_e8, 0x0d_0d_01_0c, 0x36_86_b2_b4,
    0x1e_8e_92_9c, 0x0f_4f_43_4c, 0x37_87_b3_b4, 0x1a_4a_52_58, 0x06_c6_c2_c4,
    0x38_48_70_78, 0x26_86_a2_a4, 0x12_02_12_10, 0x2f_8f_a3_ac, 0x15_c5_d1_d4,
    0x21_41_61_60, 0x03_c3_c3_c0, 0x34_84_b0_b4, 0x01_41_41_40, 0x12_42_52_50,
    0x3d_4d_71_7c, 0x0d_8d_81_8c, 0x08_08_00_08, 0x1f_0f_13_1c, 0x19_89_91_98,
    0x00_00_00_00, 0x19_09_11_18, 0x04_04_00_04, 0x13_43_53_50, 0x37_c7_f3_f4,
    0x21_c1_e1_e0, 0x3d_cd_f1_fc, 0x36_46_72_74, 0x2f_0f_23_2c, 0x27_07_23_24,
    0x30_80_b0_b0, 0x0b_8b_83_88, 0x0e_0e_02_0c, 0x2b_8b_a3_a8, 0x22_82_a2_a0,
    0x2e_4e_62_6c, 0x13_83_93_90, 0x0d_4d_41_4c, 0x29_49_61_68, 0x3c_4c_70_7c,
    0x09_09_01_08, 0x0a_0a_02_08, 0x3f_8f_b3_bc, 0x2f_cf_e3_ec, 0x33_c3_f3_f0,
    0x05_c5_c1_c4, 0x07_87_83_84, 0x14_04_10_14, 0x3e_ce_f2_fc, 0x24_44_60_64,
    0x1e_ce_d2_dc, 0x2e_0e_22_2c, 0x0b_4b_43_48, 0x1a_0a_12_18, 0x06_06_02_04,
    0x21_01_21_20, 0x2b_4b_63_68, 0x26_46_62_64, 0x02_02_02_00, 0x35_c5_f1_f4,
    0x12_82_92_90, 0x0a_8a_82_88, 0x0c_0c_00_0c, 0x33_83_b3_b0, 0x3e_4e_72_7c,
    0x10_c0_d0_d0, 0x3a_4a_72_78, 0x07_47_43_44, 0x16_86_92_94, 0x25_c5_e1_e4,
    0x26_06_22_24, 0x00_80_80_80, 0x2d_8d_a1_ac, 0x1f_cf_d3_dc, 0x21_81_a1_a0,
    0x30_00_30_30, 0x37_07_33_34, 0x2e_8e_a2_ac, 0x36_06_32_34, 0x15_05_11_14,
    0x22_02_22_20, 0x38_08_30_38, 0x34_c4_f0_f4, 0x27_87_a3_a4, 0x05_45_41_44,
    0x0c_4c_40_4c, 0x01_81_81_80, 0x29_c9_e1_e8, 0x04_84_80_84, 0x17_87_93_94,
    0x35_05_31_34, 0x0b_cb_c3_c8, 0x0e_ce_c2_cc, 0x3c_0c_30_3c, 0x31_41_71_70,
    0x11_01_11_10, 0x07_c7_c3_c4, 0x09_89_81_88, 0x35_45_71_74, 0x3b_cb_f3_f8,
    0x1a_ca_d2_d8, 0x38_c8_f0_f8, 0x14_84_90_94, 0x19_49_51_58, 0x02_82_82_80,
    0x04_c4_c0_c4, 0x3f_cf_f3_fc, 0x09_49_41_48, 0x39_09_31_38, 0x27_47_63_64,
    0x00_c0_c0_c0, 0x0f_cf_c3_cc, 0x17_c7_d3_d4, 0x38_88_b0_b8, 0x0f_0f_03_0c,
    0x0e_8e_82_8c, 0x02_42_42_40, 0x23_03_23_20, 0x11_81_91_90, 0x2c_4c_60_6c,
    0x1b_cb_d3_d8, 0x24_84_a0_a4, 0x34_04_30_34, 0x31_c1_f1_f0, 0x08_48_40_48,
    0x02_c2_c2_c0, 0x2f_4f_63_6c, 0x3d_0d_31_3c, 0x2d_0d_21_2c, 0x00_40_40_40,
    0x3e_8e_b2_bc, 0x3e_0e_32_3c, 0x3c_8c_b0_bc, 0x01_c1_c1_c0, 0x2a_8a_a2_a8,
    0x3a_8a_b2_b8, 0x0e_4e_42_4c, 0x15_45_51_54, 0x3b_0b_33_38, 0x1c_cc_d0_dc,
    0x28_48_60_68, 0x3f_4f_73_7c, 0x1c_8c_90_9c, 0x18_c8_d0_d8, 0x0a_4a_42_48,
    0x16_46_52_54, 0x37_47_73_74, 0x20_80_a0_a0, 0x2d_cd_e1_ec, 0x06_46_42_44,
    0x35_85_b1_b4, 0x2b_0b_23_28, 0x25_45_61_64, 0x3a_ca_f2_f8, 0x23_c3_e3_e0,
    0x39_89_b1_b8, 0x31_81_b1_b0, 0x1f_8f_93_9c, 0x1e_4e_52_5c, 0x39_c9_f1_f8,
    0x26_c6_e2_e4, 0x32_82_b2_b0, 0x31_01_31_30, 0x2a_ca_e2_e8, 0x2d_4d_61_6c,
    0x1f_4f_53_5c, 0x24_c4_e0_e4, 0x30_c0_f0_f0, 0x0d_cd_c1_cc, 0x08_88_80_88,
    0x16_06_12_14, 0x3a_0a_32_38, 0x18_48_50_58, 0x14_c4_d0_d4, 0x22_42_62_60,
    0x29_09_21_28, 0x07_07_03_04, 0x33_03_33_30, 0x28_c8_e0_e8, 0x1b_0b_13_18,
    0x05_05_01_04, 0x39_49_71_78, 0x10_80_90_90, 0x2a_4a_62_68, 0x2a_0a_22_28,
    0x1a_8a_92_98
  ],
  [
    0x38_38_08_30, 0xe8_28_c8_e0, 0x2c_2d_0d_21, 0xa4_26_86_a2, 0xcc_0f_cf_c3,
    0xdc_1e_ce_d2, 0xb0_33_83_b3, 0xb8_38_88_b0, 0xac_2f_8f_a3, 0x60_20_40_60,
    0x54_15_45_51, 0xc4_07_c7_c3, 0x44_04_44_40, 0x6c_2f_4f_63, 0x68_2b_4b_63,
    0x58_1b_4b_53, 0xc0_03_c3_c3, 0x60_22_42_62, 0x30_33_03_33, 0xb4_35_85_b1,
    0x28_29_09_21, 0xa0_20_80_a0, 0xe0_22_c2_e2, 0xa4_27_87_a3, 0xd0_13_c3_d3,
    0x90_11_81_91, 0x10_11_01_11, 0x04_06_06_02, 0x1c_1c_0c_10, 0xbc_3c_8c_b0,
    0x34_36_06_32, 0x48_0b_4b_43, 0xec_2f_cf_e3, 0x88_08_88_80, 0x6c_2c_4c_60,
    0xa8_28_88_a0, 0x14_17_07_13, 0xc4_04_c4_c0, 0x14_16_06_12, 0xf4_34_c4_f0,
    0xc0_02_c2_c2, 0x44_05_45_41, 0xe0_21_c1_e1, 0xd4_16_c6_d2, 0x3c_3f_0f_33,
    0x3c_3d_0d_31, 0x8c_0e_8e_82, 0x98_18_88_90, 0x28_28_08_20, 0x4c_0e_4e_42,
    0xf4_36_c6_f2, 0x3c_3e_0e_32, 0xa4_25_85_a1, 0xf8_39_c9_f1, 0x0c_0d_0d_01,
    0xdc_1f_cf_d3, 0xd8_18_c8_d0, 0x28_2b_0b_23, 0x64_26_46_62, 0x78_3a_4a_72,
    0x24_27_07_23, 0x2c_2f_0f_23, 0xf0_31_c1_f1, 0x70_32_42_72, 0x40_02_42_42,
    0xd4_14_c4_d0, 0x40_01_41_41, 0xc0_00_c0_c0, 0x70_33_43_73, 0x64_27_47_63,
    0xac_2c_8c_a0, 0x88_0b_8b_83, 0xf4_37_c7_f3, 0xac_2d_8d_a1, 0x80_00_80_80,
    0x1c_1f_0f_13, 0xc8_0a_ca_c2, 0x2c_2c_0c_20, 0xa8_2a_8a_a2, 0x34_34_04_30,
    0xd0_12_c2_d2, 0x08_0b_0b_03, 0xec_2e_ce_e2, 0xe8_29_c9_e1, 0x5c_1d_4d_51,
    0x94_14_84_90, 0x18_18_08_10, 0xf8_38_c8_f0, 0x54_17_47_53, 0xac_2e_8e_a2,
    0x08_08_08_00, 0xc4_05_c5_c1, 0x10_13_03_13, 0xcc_0d_cd_c1, 0x84_06_86_82,
    0xb8_39_89_b1, 0xfc_3f_cf_f3, 0x7c_3d_4d_71, 0xc0_01_c1_c1, 0x30_31_01_31,
    0xf4_35_c5_f1, 0x88_0a_8a_82, 0x68_2a_4a_62, 0xb0_31_81_b1, 0xd0_11_c1_d1,
    0x20_20_00_20, 0xd4_17_c7_d3, 0x00_02_02_02, 0x20_22_02_22, 0x04_04_04_00,
    0x68_28_48_60, 0x70_31_41_71, 0x04_07_07_03, 0xd8_1b_cb_d3, 0x9c_1d_8d_91,
    0x98_19_89_91, 0x60_21_41_61, 0xbc_3e_8e_b2, 0xe4_26_c6_e2, 0x58_19_49_51,
    0xdc_1d_cd_d1, 0x50_11_41_51, 0x90_10_80_90, 0xdc_1c_cc_d0, 0x98_1a_8a_92,
    0xa0_23_83_a3, 0xa8_2b_8b_a3, 0xd0_10_c0_d0, 0x80_01_81_81, 0x0c_0f_0f_03,
    0x44_07_47_43, 0x18_1a_0a_12, 0xe0_23_c3_e3, 0xec_2c_cc_e0, 0x8c_0d_8d_81,
    0xbc_3f_8f_b3, 0x94_16_86_92, 0x78_3b_4b_73, 0x5c_1c_4c_50, 0xa0_22_82_a2,
    0xa0_21_81_a1, 0x60_23_43_63, 0x20_23_03_23, 0x4c_0d_4d_41, 0xc8_08_c8_c0,
    0x9c_1e_8e_92, 0x9c_1c_8c_90, 0x38_3a_0a_32, 0x0c_0c_0c_00, 0x2c_2e_0e_22,
    0xb8_3a_8a_b2, 0x6c_2e_4e_62, 0x9c_1f_8f_93, 0x58_1a_4a_52, 0xf0_32_c2_f2,
    0x90_12_82_92, 0xf0_33_c3_f3, 0x48_09_49_41, 0x78_38_48_70, 0xcc_0c_cc_c0,
    0x14_15_05_11, 0xf8_3b_cb_f3, 0x70_30_40_70, 0x74_35_45_71, 0x7c_3f_4f_73,
    0x34_35_05_31, 0x10_10_00_10, 0x00_03_03_03, 0x64_24_44_60, 0x6c_2d_4d_61,
    0xc4_06_c6_c2, 0x74_34_44_70, 0xd4_15_c5_d1, 0xb4_34_84_b0, 0xe8_2a_ca_e2,
    0x08_09_09_01, 0x74_36_46_72, 0x18_19_09_11, 0xfc_3e_ce_f2, 0x40_00_40_40,
    0x10_12_02_12, 0xe0_20_c0_e0, 0xbc_3d_8d_b1, 0x04_05_05_01, 0xf8_3a_ca_f2,
    0x00_01_01_01, 0xf0_30_c0_f0, 0x28_2a_0a_22, 0x5c_1e_4e_52, 0xa8_29_89_a1,
    0x54_16_46_52, 0x40_03_43_43, 0x84_05_85_81, 0x14_14_04_10, 0x88_09_89_81,
    0x98_1b_8b_93, 0xb0_30_80_b0, 0xe4_25_c5_e1, 0x48_08_48_40, 0x78_39_49_71,
    0x94_17_87_93, 0xfc_3c_cc_f0, 0x1c_1e_0e_12, 0x80_02_82_82, 0x20_21_01_21,
    0x8c_0c_8c_80, 0x18_1b_0b_13, 0x5c_1f_4f_53, 0x74_37_47_73, 0x54_14_44_50,
    0xb0_32_82_b2, 0x1c_1d_0d_11, 0x24_25_05_21, 0x4c_0f_4f_43, 0x00_00_00_00,
    0x44_06_46_42, 0xec_2d_cd_e1, 0x58_18_48_50, 0x50_12_42_52, 0xe8_2b_cb_e3,
    0x7c_3e_4e_72, 0xd8_1a_ca_d2, 0xc8_09_c9_c1, 0xfc_3d_cd_f1, 0x30_30_00_30,
    0x94_15_85_91, 0x64_25_45_61, 0x3c_3c_0c_30, 0xb4_36_86_b2, 0xe4_24_c4_e0,
    0xb8_3b_8b_b3, 0x7c_3c_4c_70, 0x0c_0e_0e_02, 0x50_10_40_50, 0x38_39_09_31,
    0x24_26_06_22, 0x30_32_02_32, 0x84_04_84_80, 0x68_29_49_61, 0x90_13_83_93,
    0x34_37_07_33, 0xe4_27_c7_e3, 0x24_24_04_20, 0xa4_24_84_a0, 0xc8_0b_cb_c3,
    0x50_13_43_53, 0x08_0a_0a_02, 0x84_07_87_83, 0xd8_19_c9_d1, 0x4c_0c_4c_40,
    0x80_03_83_83, 0x8c_0f_8f_83, 0xcc_0e_ce_c2, 0x38_3b_0b_33, 0x48_0a_4a_42,
    0xb4_37_87_b3
  ],
  [
    0xa1_a8_29_89, 0x81_84_05_85, 0xd2_d4_16_c6, 0xd3_d0_13_c3, 0x50_54_14_44,
    0x11_1c_1d_0d, 0xa0_ac_2c_8c, 0x21_24_25_05, 0x51_5c_1d_4d, 0x43_40_03_43,
    0x10_18_18_08, 0x12_1c_1e_0e, 0x51_50_11_41, 0xf0_fc_3c_cc, 0xc2_c8_0a_ca,
    0x63_60_23_43, 0x20_28_28_08, 0x40_44_04_44, 0x20_20_20_00, 0x91_9c_1d_8d,
    0xe0_e0_20_c0, 0xe2_e0_22_c2, 0xc0_c8_08_c8, 0x13_14_17_07, 0xa1_a4_25_85,
    0x83_8c_0f_8f, 0x03_00_03_03, 0x73_78_3b_4b, 0xb3_b8_3b_8b, 0x13_10_13_03,
    0xd2_d0_12_c2, 0xe2_ec_2e_ce, 0x70_70_30_40, 0x80_8c_0c_8c, 0x33_3c_3f_0f,
    0xa0_a8_28_88, 0x32_30_32_02, 0xd1_dc_1d_cd, 0xf2_f4_36_c6, 0x70_74_34_44,
    0xe0_ec_2c_cc, 0x91_94_15_85, 0x03_08_0b_0b, 0x53_54_17_47, 0x50_5c_1c_4c,
    0x53_58_1b_4b, 0xb1_bc_3d_8d, 0x01_00_01_01, 0x20_24_24_04, 0x10_1c_1c_0c,
    0x73_70_33_43, 0x90_98_18_88, 0x10_10_10_00, 0xc0_cc_0c_cc, 0xf2_f0_32_c2,
    0xd1_d8_19_c9, 0x20_2c_2c_0c, 0xe3_e4_27_c7, 0x72_70_32_42, 0x83_80_03_83,
    0x93_98_1b_8b, 0xd1_d0_11_c1, 0x82_84_06_86, 0xc1_c8_09_c9, 0x60_60_20_40,
    0x50_50_10_40, 0xa3_a0_23_83, 0xe3_e8_2b_cb, 0x01_0c_0d_0d, 0xb2_b4_36_86,
    0x92_9c_1e_8e, 0x43_4c_0f_4f, 0xb3_b4_37_87, 0x52_58_1a_4a, 0xc2_c4_06_c6,
    0x70_78_38_48, 0xa2_a4_26_86, 0x12_10_12_02, 0xa3_ac_2f_8f, 0xd1_d4_15_c5,
    0x61_60_21_41, 0xc3_c0_03_c3, 0xb0_b4_34_84, 0x41_40_01_41, 0x52_50_12_42,
    0x71_7c_3d_4d, 0x81_8c_0d_8d, 0x00_08_08_08, 0x13_1c_1f_0f, 0x91_98_19_89,
    0x00_00_00_00, 0x11_18_19_09, 0x00_04_04_04, 0x53_50_13_43, 0xf3_f4_37_c7,
    0xe1_e0_21_c1, 0xf1_fc_3d_cd, 0x72_74_36_46, 0x23_2c_2f_0f, 0x23_24_27_07,
    0xb0_b0_30_80, 0x83_88_0b_8b, 0x02_0c_0e_0e, 0xa3_a8_2b_8b, 0xa2_a0_22_82,
    0x62_6c_2e_4e, 0x93_90_13_83, 0x41_4c_0d_4d, 0x61_68_29_49, 0x70_7c_3c_4c,
    0x01_08_09_09, 0x02_08_0a_0a, 0xb3_bc_3f_8f, 0xe3_ec_2f_cf, 0xf3_f0_33_c3,
    0xc1_c4_05_c5, 0x83_84_07_87, 0x10_14_14_04, 0xf2_fc_3e_ce, 0x60_64_24_44,
    0xd2_dc_1e_ce, 0x22_2c_2e_0e, 0x43_48_0b_4b, 0x12_18_1a_0a, 0x02_04_06_06,
    0x21_20_21_01, 0x63_68_2b_4b, 0x62_64_26_46, 0x02_00_02_02, 0xf1_f4_35_c5,
    0x92_90_12_82, 0x82_88_0a_8a, 0x00_0c_0c_0c, 0xb3_b0_33_83, 0x72_7c_3e_4e,
    0xd0_d0_10_c0, 0x72_78_3a_4a, 0x43_44_07_47, 0x92_94_16_86, 0xe1_e4_25_c5,
    0x22_24_26_06, 0x80_80_00_80, 0xa1_ac_2d_8d, 0xd3_dc_1f_cf, 0xa1_a0_21_81,
    0x30_30_30_00, 0x33_34_37_07, 0xa2_ac_2e_8e, 0x32_34_36_06, 0x11_14_15_05,
    0x22_20_22_02, 0x30_38_38_08, 0xf0_f4_34_c4, 0xa3_a4_27_87, 0x41_44_05_45,
    0x40_4c_0c_4c, 0x81_80_01_81, 0xe1_e8_29_c9, 0x80_84_04_84, 0x93_94_17_87,
    0x31_34_35_05, 0xc3_c8_0b_cb, 0xc2_cc_0e_ce, 0x30_3c_3c_0c, 0x71_70_31_41,
    0x11_10_11_01, 0xc3_c4_07_c7, 0x81_88_09_89, 0x71_74_35_45, 0xf3_f8_3b_cb,
    0xd2_d8_1a_ca, 0xf0_f8_38_c8, 0x90_94_14_84, 0x51_58_19_49, 0x82_80_02_82,
    0xc0_c4_04_c4, 0xf3_fc_3f_cf, 0x41_48_09_49, 0x31_38_39_09, 0x63_64_27_47,
    0xc0_c0_00_c0, 0xc3_cc_0f_cf, 0xd3_d4_17_c7, 0xb0_b8_38_88, 0x03_0c_0f_0f,
    0x82_8c_0e_8e, 0x42_40_02_42, 0x23_20_23_03, 0x91_90_11_81, 0x60_6c_2c_4c,
    0xd3_d8_1b_cb, 0xa0_a4_24_84, 0x30_34_34_04, 0xf1_f0_31_c1, 0x40_48_08_48,
    0xc2_c0_02_c2, 0x63_6c_2f_4f, 0x31_3c_3d_0d, 0x21_2c_2d_0d, 0x40_40_00_40,
    0xb2_bc_3e_8e, 0x32_3c_3e_0e, 0xb0_bc_3c_8c, 0xc1_c0_01_c1, 0xa2_a8_2a_8a,
    0xb2_b8_3a_8a, 0x42_4c_0e_4e, 0x51_54_15_45, 0x33_38_3b_0b, 0xd0_dc_1c_cc,
    0x60_68_28_48, 0x73_7c_3f_4f, 0x90_9c_1c_8c, 0xd0_d8_18_c8, 0x42_48_0a_4a,
    0x52_54_16_46, 0x73_74_37_47, 0xa0_a0_20_80, 0xe1_ec_2d_cd, 0x42_44_06_46,
    0xb1_b4_35_85, 0x23_28_2b_0b, 0x61_64_25_45, 0xf2_f8_3a_ca, 0xe3_e0_23_c3,
    0xb1_b8_39_89, 0xb1_b0_31_81, 0x93_9c_1f_8f, 0x52_5c_1e_4e, 0xf1_f8_39_c9,
    0xe2_e4_26_c6, 0xb2_b0_32_82, 0x31_30_31_01, 0xe2_e8_2a_ca, 0x61_6c_2d_4d,
    0x53_5c_1f_4f, 0xe0_e4_24_c4, 0xf0_f0_30_c0, 0xc1_cc_0d_cd, 0x80_88_08_88,
    0x12_14_16_06, 0x32_38_3a_0a, 0x50_58_18_48, 0xd0_d4_14_c4, 0x62_60_22_42,
    0x21_28_29_09, 0x03_04_07_07, 0x33_30_33_03, 0xe0_e8_28_c8, 0x13_18_1b_0b,
    0x01_04_05_05, 0x71_78_39_49, 0x90_90_10_80, 0x62_68_2a_4a, 0x22_28_2a_0a,
    0x92_98_1a_8a
  ],
  [
    0x08_30_38_38, 0xc8_e0_e8_28, 0x0d_21_2c_2d, 0x86_a2_a4_26, 0xcf_c3_cc_0f,
    0xce_d2_dc_1e, 0x83_b3_b0_33, 0x88_b0_b8_38, 0x8f_a3_ac_2f, 0x40_60_60_20,
    0x45_51_54_15, 0xc7_c3_c4_07, 0x44_40_44_04, 0x4f_63_6c_2f, 0x4b_63_68_2b,
    0x4b_53_58_1b, 0xc3_c3_c0_03, 0x42_62_60_22, 0x03_33_30_33, 0x85_b1_b4_35,
    0x09_21_28_29, 0x80_a0_a0_20, 0xc2_e2_e0_22, 0x87_a3_a4_27, 0xc3_d3_d0_13,
    0x81_91_90_11, 0x01_11_10_11, 0x06_02_04_06, 0x0c_10_1c_1c, 0x8c_b0_bc_3c,
    0x06_32_34_36, 0x4b_43_48_0b, 0xcf_e3_ec_2f, 0x88_80_88_08, 0x4c_60_6c_2c,
    0x88_a0_a8_28, 0x07_13_14_17, 0xc4_c0_c4_04, 0x06_12_14_16, 0xc4_f0_f4_34,
    0xc2_c2_c0_02, 0x45_41_44_05, 0xc1_e1_e0_21, 0xc6_d2_d4_16, 0x0f_33_3c_3f,
    0x0d_31_3c_3d, 0x8e_82_8c_0e, 0x88_90_98_18, 0x08_20_28_28, 0x4e_42_4c_0e,
    0xc6_f2_f4_36, 0x0e_32_3c_3e, 0x85_a1_a4_25, 0xc9_f1_f8_39, 0x0d_01_0c_0d,
    0xcf_d3_dc_1f, 0xc8_d0_d8_18, 0x0b_23_28_2b, 0x46_62_64_26, 0x4a_72_78_3a,
    0x07_23_24_27, 0x0f_23_2c_2f, 0xc1_f1_f0_31, 0x42_72_70_32, 0x42_42_40_02,
    0xc4_d0_d4_14, 0x41_41_40_01, 0xc0_c0_c0_00, 0x43_73_70_33, 0x47_63_64_27,
    0x8c_a0_ac_2c, 0x8b_83_88_0b, 0xc7_f3_f4_37, 0x8d_a1_ac_2d, 0x80_80_80_00,
    0x0f_13_1c_1f, 0xca_c2_c8_0a, 0x0c_20_2c_2c, 0x8a_a2_a8_2a, 0x04_30_34_34,
    0xc2_d2_d0_12, 0x0b_03_08_0b, 0xce_e2_ec_2e, 0xc9_e1_e8_29, 0x4d_51_5c_1d,
    0x84_90_94_14, 0x08_10_18_18, 0xc8_f0_f8_38, 0x47_53_54_17, 0x8e_a2_ac_2e,
    0x08_00_08_08, 0xc5_c1_c4_05, 0x03_13_10_13, 0xcd_c1_cc_0d, 0x86_82_84_06,
    0x89_b1_b8_39, 0xcf_f3_fc_3f, 0x4d_71_7c_3d, 0xc1_c1_c0_01, 0x01_31_30_31,
    0xc5_f1_f4_35, 0x8a_82_88_0a, 0x4a_62_68_2a, 0x81_b1_b0_31, 0xc1_d1_d0_11,
    0x00_20_20_20, 0xc7_d3_d4_17, 0x02_02_00_02, 0x02_22_20_22, 0x04_00_04_04,
    0x48_60_68_28, 0x41_71_70_31, 0x07_03_04_07, 0xcb_d3_d8_1b, 0x8d_91_9c_1d,
    0x89_91_98_19, 0x41_61_60_21, 0x8e_b2_bc_3e, 0xc6_e2_e4_26, 0x49_51_58_19,
    0xcd_d1_dc_1d, 0x41_51_50_11, 0x80_90_90_10, 0xcc_d0_dc_1c, 0x8a_92_98_1a,
    0x83_a3_a0_23, 0x8b_a3_a8_2b, 0xc0_d0_d0_10, 0x81_81_80_01, 0x0f_03_0c_0f,
    0x47_43_44_07, 0x0a_12_18_1a, 0xc3_e3_e0_23, 0xcc_e0_ec_2c, 0x8d_81_8c_0d,
    0x8f_b3_bc_3f, 0x86_92_94_16, 0x4b_73_78_3b, 0x4c_50_5c_1c, 0x82_a2_a0_22,
    0x81_a1_a0_21, 0x43_63_60_23, 0x03_23_20_23, 0x4d_41_4c_0d, 0xc8_c0_c8_08,
    0x8e_92_9c_1e, 0x8c_90_9c_1c, 0x0a_32_38_3a, 0x0c_00_0c_0c, 0x0e_22_2c_2e,
    0x8a_b2_b8_3a, 0x4e_62_6c_2e, 0x8f_93_9c_1f, 0x4a_52_58_1a, 0xc2_f2_f0_32,
    0x82_92_90_12, 0xc3_f3_f0_33, 0x49_41_48_09, 0x48_70_78_38, 0xcc_c0_cc_0c,
    0x05_11_14_15, 0xcb_f3_f8_3b, 0x40_70_70_30, 0x45_71_74_35, 0x4f_73_7c_3f,
    0x05_31_34_35, 0x00_10_10_10, 0x03_03_00_03, 0x44_60_64_24, 0x4d_61_6c_2d,
    0xc6_c2_c4_06, 0x44_70_74_34, 0xc5_d1_d4_15, 0x84_b0_b4_34, 0xca_e2_e8_2a,
    0x09_01_08_09, 0x46_72_74_36, 0x09_11_18_19, 0xce_f2_fc_3e, 0x40_40_40_00,
    0x02_12_10_12, 0xc0_e0_e0_20, 0x8d_b1_bc_3d, 0x05_01_04_05, 0xca_f2_f8_3a,
    0x01_01_00_01, 0xc0_f0_f0_30, 0x0a_22_28_2a, 0x4e_52_5c_1e, 0x89_a1_a8_29,
    0x46_52_54_16, 0x43_43_40_03, 0x85_81_84_05, 0x04_10_14_14, 0x89_81_88_09,
    0x8b_93_98_1b, 0x80_b0_b0_30, 0xc5_e1_e4_25, 0x48_40_48_08, 0x49_71_78_39,
    0x87_93_94_17, 0xcc_f0_fc_3c, 0x0e_12_1c_1e, 0x82_82_80_02, 0x01_21_20_21,
    0x8c_80_8c_0c, 0x0b_13_18_1b, 0x4f_53_5c_1f, 0x47_73_74_37, 0x44_50_54_14,
    0x82_b2_b0_32, 0x0d_11_1c_1d, 0x05_21_24_25, 0x4f_43_4c_0f, 0x00_00_00_00,
    0x46_42_44_06, 0xcd_e1_ec_2d, 0x48_50_58_18, 0x42_52_50_12, 0xcb_e3_e8_2b,
    0x4e_72_7c_3e, 0xca_d2_d8_1a, 0xc9_c1_c8_09, 0xcd_f1_fc_3d, 0x00_30_30_30,
    0x85_91_94_15, 0x45_61_64_25, 0x0c_30_3c_3c, 0x86_b2_b4_36, 0xc4_e0_e4_24,
    0x8b_b3_b8_3b, 0x4c_70_7c_3c, 0x0e_02_0c_0e, 0x40_50_50_10, 0x09_31_38_39,
    0x06_22_24_26, 0x02_32_30_32, 0x84_80_84_04, 0x49_61_68_29, 0x83_93_90_13,
    0x07_33_34_37, 0xc7_e3_e4_27, 0x04_20_24_24, 0x84_a0_a4_24, 0xcb_c3_c8_0b,
    0x43_53_50_13, 0x0a_02_08_0a, 0x87_83_84_07, 0xc9_d1_d8_19, 0x4c_40_4c_0c,
    0x83_83_80_03, 0x8f_83_8c_0f, 0xce_c2_cc_0e, 0x0b_33_38_3b, 0x4a_42_48_0a,
    0x87_b3_b4_37
  ]
];

function SEED_G(M: number): number {
  return (
    SEED_SS[3][(M >>> 24) & 0xff] ^
    SEED_SS[2][(M >>> 16) & 0xff] ^
    SEED_SS[1][(M >>> 8) & 0xff] ^
    SEED_SS[0][M & 0xff]
  );
}

function SEED_round(LR: number[][], K: number[]): number[][] {
  const L = LR[0];
  const R = LR[1];
  const T = [];

  // Feistel function
  T[0] = R[0] ^ K[0];
  T[1] = R[1] ^ K[1];
  T[1] ^= T[0];
  T[1] = SEED_G(T[1]);
  T[0] += T[1];
  T[0] = SEED_G(T[0]);
  T[1] += T[0];
  T[1] = SEED_G(T[1]);
  T[0] += T[1];

  L[0] ^= T[0];
  L[1] ^= T[1];

  return [R, L];
}

const SEED_KC = [
  0x9e_37_79_b9, 0x3c_6e_f3_73, 0x78_dd_e6_e6, 0xf1_bb_cd_cc, 0xe3_77_9b_99,
  0xc6_ef_37_33, 0x8d_de_6e_67, 0x1b_bc_dc_cf, 0x37_79_b9_9e, 0x6e_f3_73_3c,
  0xdd_e6_e6_78, 0xbb_cd_cc_f1, 0x77_9b_99_e3, 0xef_37_33_c6, 0xde_6e_67_8d,
  0xbc_dc_cf_1b
];

export class SEEDAlgo extends BlockCipher {
  public static keySize = 128 / 32;
  public static ivSize = 128 / 32;

  private _roundKeys!: number[][];
  private _invRoundKeys!: number[][];

  reset(): void {
    super.reset();
    // Shortcuts
    const key = this._key;
    let A = key.words[0];
    let B = key.words[1];
    let C = key.words[2];
    let D = key.words[3];

    // Assemble 16 round keys
    const K: number[][] = [];
    for (let i = 0; i < 16; i++) {
      K[i] = [];
      K[i][0] = SEED_G(A + C - SEED_KC[i]);
      K[i][1] = SEED_G(B - D + SEED_KC[i]);

      if (i % 2 == 0) {
        const A0 = A;
        A = (A >>> 8) | (B << 24);
        B = (B >>> 8) | (A0 << 24);
      } else {
        const C0 = C;
        C = (C << 8) | (D >>> 24);
        D = (D << 8) | (C0 >>> 24);
      }
    }

    // Compute inverse round keys as well
    this._roundKeys = K;
    this._invRoundKeys = [...K].reverse();
  }

  public encryptBlock(M: number[], offset: number): void {
    this._doCryptBlock(M, offset, this._roundKeys);
  }
  public decryptBlock(M: number[], offset: number): void {
    this._doCryptBlock(M, offset, this._invRoundKeys);
  }

  private _doCryptBlock(
    M: number[],
    offset: number,
    roundKeys: number[][]
  ): void {
    // Get input
    const L = M.slice(offset, offset + 2);
    const R = M.slice(offset + 2, offset + 4);
    let LR = [L, R];

    // Rounds
    for (let i = 0; i < 16; i++) {
      LR = SEED_round(LR, roundKeys[i]);
    }

    // Undo swap from last round
    LR.reverse();

    // Set output
    M.splice(offset, 4, LR[0][0], LR[0][1], LR[1][0], LR[1][1]);
  }
}
