// eslint-disable-next-line eslint-comments/disable-enable-pair
/* eslint-disable @typescript-eslint/ban-ts-comment */
import { BlockCipher } from "../../core/cipher/block-cipher";
import { WordArray } from "../../core/word-array";
import { BufferedBlockAlgorithmConfig } from "../../typings/core/buffered-block-algorithm.typing";

// Permuted Choice 1 constants
const PC1 = [
  57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35,
  27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38,
  30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4
];

// Permuted Choice 2 constants
const PC2 = [
  14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27,
  20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34,
  53, 46, 42, 50, 36, 29, 32
];

// Cumulative bit shift constants
const BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

// SBOXes and round permutation constants
const SBOX_P: { [key: number]: number }[] = [
  {
    0x0: 0x80_82_00,
    0x10_00_00_00: 0x80_00,
    0x20_00_00_00: 0x80_80_02,
    0x30_00_00_00: 0x2,
    0x40_00_00_00: 0x2_00,
    0x50_00_00_00: 0x80_82_02,
    0x60_00_00_00: 0x80_02_02,
    0x70_00_00_00: 0x80_00_00,
    0x80_00_00_00: 0x2_02,
    0x90_00_00_00: 0x80_02_00,
    0xa0_00_00_00: 0x82_00,
    0xb0_00_00_00: 0x80_80_00,
    0xc0_00_00_00: 0x80_02,
    0xd0_00_00_00: 0x80_00_02,
    0xe0_00_00_00: 0x0,
    0xf0_00_00_00: 0x82_02,
    0x8_00_00_00: 0x0,
    0x18_00_00_00: 0x80_82_02,
    0x28_00_00_00: 0x82_02,
    0x38_00_00_00: 0x80_00,
    0x48_00_00_00: 0x80_82_00,
    0x58_00_00_00: 0x2_00,
    0x68_00_00_00: 0x80_80_02,
    0x78_00_00_00: 0x2,
    0x88_00_00_00: 0x80_02_00,
    0x98_00_00_00: 0x82_00,
    0xa8_00_00_00: 0x80_80_00,
    0xb8_00_00_00: 0x80_02_02,
    0xc8_00_00_00: 0x80_00_02,
    0xd8_00_00_00: 0x80_02,
    0xe8_00_00_00: 0x2_02,
    0xf8_00_00_00: 0x80_00_00,
    0x1: 0x80_00,
    0x10_00_00_01: 0x2,
    0x20_00_00_01: 0x80_82_00,
    0x30_00_00_01: 0x80_00_00,
    0x40_00_00_01: 0x80_80_02,
    0x50_00_00_01: 0x82_00,
    0x60_00_00_01: 0x2_00,
    0x70_00_00_01: 0x80_02_02,
    0x80_00_00_01: 0x80_82_02,
    0x90_00_00_01: 0x80_80_00,
    0xa0_00_00_01: 0x80_00_02,
    0xb0_00_00_01: 0x82_02,
    0xc0_00_00_01: 0x2_02,
    0xd0_00_00_01: 0x80_02_00,
    0xe0_00_00_01: 0x80_02,
    0xf0_00_00_01: 0x0,
    0x8_00_00_01: 0x80_82_02,
    0x18_00_00_01: 0x80_80_00,
    0x28_00_00_01: 0x80_00_00,
    0x38_00_00_01: 0x2_00,
    0x48_00_00_01: 0x80_00,
    0x58_00_00_01: 0x80_00_02,
    0x68_00_00_01: 0x2,
    0x78_00_00_01: 0x82_02,
    0x88_00_00_01: 0x80_02,
    0x98_00_00_01: 0x80_02_02,
    0xa8_00_00_01: 0x2_02,
    0xb8_00_00_01: 0x80_82_00,
    0xc8_00_00_01: 0x80_02_00,
    0xd8_00_00_01: 0x0,
    0xe8_00_00_01: 0x82_00,
    0xf8_00_00_01: 0x80_80_02
  },
  {
    0x0: 0x40_08_40_10,
    0x1_00_00_00: 0x40_00,
    0x2_00_00_00: 0x8_00_00,
    0x3_00_00_00: 0x40_08_00_10,
    0x4_00_00_00: 0x40_00_00_10,
    0x5_00_00_00: 0x40_08_40_00,
    0x6_00_00_00: 0x40_00_40_00,
    0x7_00_00_00: 0x10,
    0x8_00_00_00: 0x8_40_00,
    0x9_00_00_00: 0x40_00_40_10,
    0xa_00_00_00: 0x40_00_00_00,
    0xb_00_00_00: 0x8_40_10,
    0xc_00_00_00: 0x8_00_10,
    0xd_00_00_00: 0x0,
    0xe_00_00_00: 0x40_10,
    0xf_00_00_00: 0x40_08_00_00,
    0x80_00_00: 0x40_00_40_00,
    0x1_80_00_00: 0x8_40_10,
    0x2_80_00_00: 0x10,
    0x3_80_00_00: 0x40_00_40_10,
    0x4_80_00_00: 0x40_08_40_10,
    0x5_80_00_00: 0x40_00_00_00,
    0x6_80_00_00: 0x8_00_00,
    0x7_80_00_00: 0x40_08_00_10,
    0x8_80_00_00: 0x8_00_10,
    0x9_80_00_00: 0x0,
    0xa_80_00_00: 0x40_00,
    0xb_80_00_00: 0x40_08_00_00,
    0xc_80_00_00: 0x40_00_00_10,
    0xd_80_00_00: 0x8_40_00,
    0xe_80_00_00: 0x40_08_40_00,
    0xf_80_00_00: 0x40_10,
    0x10_00_00_00: 0x0,
    0x11_00_00_00: 0x40_08_00_10,
    0x12_00_00_00: 0x40_00_40_10,
    0x13_00_00_00: 0x40_08_40_00,
    0x14_00_00_00: 0x40_08_00_00,
    0x15_00_00_00: 0x10,
    0x16_00_00_00: 0x8_40_10,
    0x17_00_00_00: 0x40_00,
    0x18_00_00_00: 0x40_10,
    0x19_00_00_00: 0x8_00_00,
    0x1a_00_00_00: 0x8_00_10,
    0x1b_00_00_00: 0x40_00_00_10,
    0x1c_00_00_00: 0x8_40_00,
    0x1d_00_00_00: 0x40_00_40_00,
    0x1e_00_00_00: 0x40_00_00_00,
    0x1f_00_00_00: 0x40_08_40_10,
    0x10_80_00_00: 0x8_40_10,
    0x11_80_00_00: 0x8_00_00,
    0x12_80_00_00: 0x40_08_00_00,
    0x13_80_00_00: 0x40_00,
    0x14_80_00_00: 0x40_00_40_00,
    0x15_80_00_00: 0x40_08_40_10,
    0x16_80_00_00: 0x10,
    0x17_80_00_00: 0x40_00_00_00,
    0x18_80_00_00: 0x40_08_40_00,
    0x19_80_00_00: 0x40_00_00_10,
    0x1a_80_00_00: 0x40_00_40_10,
    0x1b_80_00_00: 0x8_00_10,
    0x1c_80_00_00: 0x0,
    0x1d_80_00_00: 0x40_10,
    0x1e_80_00_00: 0x40_08_00_10,
    0x1f_80_00_00: 0x8_40_00
  },
  {
    0x0: 0x1_04,
    0x10_00_00: 0x0,
    0x20_00_00: 0x4_00_01_00,
    0x30_00_00: 0x1_01_04,
    0x40_00_00: 0x1_00_04,
    0x50_00_00: 0x4_00_00_04,
    0x60_00_00: 0x4_01_01_04,
    0x70_00_00: 0x4_01_00_00,
    0x80_00_00: 0x4_00_00_00,
    0x90_00_00: 0x4_01_01_00,
    0xa0_00_00: 0x1_01_00,
    0xb0_00_00: 0x4_01_00_04,
    0xc0_00_00: 0x4_00_01_04,
    0xd0_00_00: 0x1_00_00,
    0xe0_00_00: 0x4,
    0xf0_00_00: 0x1_00,
    0x8_00_00: 0x4_01_01_00,
    0x18_00_00: 0x4_01_00_04,
    0x28_00_00: 0x0,
    0x38_00_00: 0x4_00_01_00,
    0x48_00_00: 0x4_00_00_04,
    0x58_00_00: 0x1_00_00,
    0x68_00_00: 0x1_00_04,
    0x78_00_00: 0x1_04,
    0x88_00_00: 0x4,
    0x98_00_00: 0x1_00,
    0xa8_00_00: 0x4_01_00_00,
    0xb8_00_00: 0x1_01_04,
    0xc8_00_00: 0x1_01_00,
    0xd8_00_00: 0x4_00_01_04,
    0xe8_00_00: 0x4_01_01_04,
    0xf8_00_00: 0x4_00_00_00,
    0x1_00_00_00: 0x4_01_01_00,
    0x1_10_00_00: 0x1_00_04,
    0x1_20_00_00: 0x1_00_00,
    0x1_30_00_00: 0x4_00_01_00,
    0x1_40_00_00: 0x1_00,
    0x1_50_00_00: 0x4_01_01_04,
    0x1_60_00_00: 0x4_00_00_04,
    0x1_70_00_00: 0x0,
    0x1_80_00_00: 0x4_00_01_04,
    0x1_90_00_00: 0x4_00_00_00,
    0x1_a0_00_00: 0x4,
    0x1_b0_00_00: 0x1_01_00,
    0x1_c0_00_00: 0x4_01_00_00,
    0x1_d0_00_00: 0x1_04,
    0x1_e0_00_00: 0x1_01_04,
    0x1_f0_00_00: 0x4_01_00_04,
    0x1_08_00_00: 0x4_00_00_00,
    0x1_18_00_00: 0x1_04,
    0x1_28_00_00: 0x4_01_01_00,
    0x1_38_00_00: 0x0,
    0x1_48_00_00: 0x1_00_04,
    0x1_58_00_00: 0x4_00_01_00,
    0x1_68_00_00: 0x1_00,
    0x1_78_00_00: 0x4_01_00_04,
    0x1_88_00_00: 0x1_00_00,
    0x1_98_00_00: 0x4_01_01_04,
    0x1_a8_00_00: 0x1_01_04,
    0x1_b8_00_00: 0x4_00_00_04,
    0x1_c8_00_00: 0x4_00_01_04,
    0x1_d8_00_00: 0x4_01_00_00,
    0x1_e8_00_00: 0x4,
    0x1_f8_00_00: 0x1_01_00
  },
  {
    0x0: 0x80_40_10_00,
    0x1_00_00: 0x80_00_10_40,
    0x2_00_00: 0x40_10_40,
    0x3_00_00: 0x80_40_00_00,
    0x4_00_00: 0x0,
    0x5_00_00: 0x40_10_00,
    0x6_00_00: 0x80_00_00_40,
    0x7_00_00: 0x40_00_40,
    0x8_00_00: 0x80_00_00_00,
    0x9_00_00: 0x40_00_00,
    0xa_00_00: 0x40,
    0xb_00_00: 0x80_00_10_00,
    0xc_00_00: 0x80_40_00_40,
    0xd_00_00: 0x10_40,
    0xe_00_00: 0x10_00,
    0xf_00_00: 0x80_40_10_40,
    0x80_00: 0x80_00_10_40,
    0x1_80_00: 0x40,
    0x2_80_00: 0x80_40_00_40,
    0x3_80_00: 0x80_00_10_00,
    0x4_80_00: 0x40_10_00,
    0x5_80_00: 0x80_40_10_40,
    0x6_80_00: 0x0,
    0x7_80_00: 0x80_40_00_00,
    0x8_80_00: 0x10_00,
    0x9_80_00: 0x80_40_10_00,
    0xa_80_00: 0x40_00_00,
    0xb_80_00: 0x10_40,
    0xc_80_00: 0x80_00_00_00,
    0xd_80_00: 0x40_00_40,
    0xe_80_00: 0x40_10_40,
    0xf_80_00: 0x80_00_00_40,
    0x10_00_00: 0x40_00_40,
    0x11_00_00: 0x40_10_00,
    0x12_00_00: 0x80_00_00_40,
    0x13_00_00: 0x0,
    0x14_00_00: 0x10_40,
    0x15_00_00: 0x80_40_00_40,
    0x16_00_00: 0x80_40_10_00,
    0x17_00_00: 0x80_00_10_40,
    0x18_00_00: 0x80_40_10_40,
    0x19_00_00: 0x80_00_00_00,
    0x1a_00_00: 0x80_40_00_00,
    0x1b_00_00: 0x40_10_40,
    0x1c_00_00: 0x80_00_10_00,
    0x1d_00_00: 0x40_00_00,
    0x1e_00_00: 0x40,
    0x1f_00_00: 0x10_00,
    0x10_80_00: 0x80_40_00_00,
    0x11_80_00: 0x80_40_10_40,
    0x12_80_00: 0x0,
    0x13_80_00: 0x40_10_00,
    0x14_80_00: 0x40_00_40,
    0x15_80_00: 0x80_00_00_00,
    0x16_80_00: 0x80_00_10_40,
    0x17_80_00: 0x40,
    0x18_80_00: 0x80_00_00_40,
    0x19_80_00: 0x10_00,
    0x1a_80_00: 0x80_00_10_00,
    0x1b_80_00: 0x80_40_00_40,
    0x1c_80_00: 0x10_40,
    0x1d_80_00: 0x80_40_10_00,
    0x1e_80_00: 0x40_00_00,
    0x1f_80_00: 0x40_10_40
  },
  {
    0x0: 0x80,
    0x10_00: 0x1_04_00_00,
    0x20_00: 0x4_00_00,
    0x30_00: 0x20_00_00_00,
    0x40_00: 0x20_04_00_80,
    0x50_00: 0x1_00_00_80,
    0x60_00: 0x21_00_00_80,
    0x70_00: 0x4_00_80,
    0x80_00: 0x1_00_00_00,
    0x90_00: 0x20_04_00_00,
    0xa0_00: 0x20_00_00_80,
    0xb0_00: 0x21_04_00_80,
    0xc0_00: 0x21_04_00_00,
    0xd0_00: 0x0,
    0xe0_00: 0x1_04_00_80,
    0xf0_00: 0x21_00_00_00,
    0x8_00: 0x1_04_00_80,
    0x18_00: 0x21_00_00_80,
    0x28_00: 0x80,
    0x38_00: 0x1_04_00_00,
    0x48_00: 0x4_00_00,
    0x58_00: 0x20_04_00_80,
    0x68_00: 0x21_04_00_00,
    0x78_00: 0x20_00_00_00,
    0x88_00: 0x20_04_00_00,
    0x98_00: 0x0,
    0xa8_00: 0x21_04_00_80,
    0xb8_00: 0x1_00_00_80,
    0xc8_00: 0x20_00_00_80,
    0xd8_00: 0x21_00_00_00,
    0xe8_00: 0x1_00_00_00,
    0xf8_00: 0x4_00_80,
    0x1_00_00: 0x4_00_00,
    0x1_10_00: 0x80,
    0x1_20_00: 0x20_00_00_00,
    0x1_30_00: 0x21_00_00_80,
    0x1_40_00: 0x1_00_00_80,
    0x1_50_00: 0x21_04_00_00,
    0x1_60_00: 0x20_04_00_80,
    0x1_70_00: 0x1_00_00_00,
    0x1_80_00: 0x21_04_00_80,
    0x1_90_00: 0x21_00_00_00,
    0x1_a0_00: 0x1_04_00_00,
    0x1_b0_00: 0x20_04_00_00,
    0x1_c0_00: 0x4_00_80,
    0x1_d0_00: 0x20_00_00_80,
    0x1_e0_00: 0x0,
    0x1_f0_00: 0x1_04_00_80,
    0x1_08_00: 0x21_00_00_80,
    0x1_18_00: 0x1_00_00_00,
    0x1_28_00: 0x1_04_00_00,
    0x1_38_00: 0x20_04_00_80,
    0x1_48_00: 0x20_00_00_00,
    0x1_58_00: 0x1_04_00_80,
    0x1_68_00: 0x80,
    0x1_78_00: 0x21_04_00_00,
    0x1_88_00: 0x4_00_80,
    0x1_98_00: 0x21_04_00_80,
    0x1_a8_00: 0x0,
    0x1_b8_00: 0x21_00_00_00,
    0x1_c8_00: 0x1_00_00_80,
    0x1_d8_00: 0x4_00_00,
    0x1_e8_00: 0x20_04_00_00,
    0x1_f8_00: 0x20_00_00_80
  },
  {
    0x0: 0x10_00_00_08,
    0x1_00: 0x20_00,
    0x2_00: 0x10_20_00_00,
    0x3_00: 0x10_20_20_08,
    0x4_00: 0x10_00_20_00,
    0x5_00: 0x20_00_00,
    0x6_00: 0x20_00_08,
    0x7_00: 0x10_00_00_00,
    0x8_00: 0x0,
    0x9_00: 0x10_00_20_08,
    0xa_00: 0x20_20_00,
    0xb_00: 0x8,
    0xc_00: 0x10_20_00_08,
    0xd_00: 0x20_20_08,
    0xe_00: 0x20_08,
    0xf_00: 0x10_20_20_00,
    0x80: 0x10_20_00_00,
    0x1_80: 0x10_20_20_08,
    0x2_80: 0x8,
    0x3_80: 0x20_00_00,
    0x4_80: 0x20_20_08,
    0x5_80: 0x10_00_00_08,
    0x6_80: 0x10_00_20_00,
    0x7_80: 0x20_08,
    0x8_80: 0x20_00_08,
    0x9_80: 0x20_00,
    0xa_80: 0x10_00_20_08,
    0xb_80: 0x10_20_00_08,
    0xc_80: 0x0,
    0xd_80: 0x10_20_20_00,
    0xe_80: 0x20_20_00,
    0xf_80: 0x10_00_00_00,
    0x10_00: 0x10_00_20_00,
    0x11_00: 0x10_20_00_08,
    0x12_00: 0x10_20_20_08,
    0x13_00: 0x20_08,
    0x14_00: 0x20_00_00,
    0x15_00: 0x10_00_00_00,
    0x16_00: 0x10_00_00_08,
    0x17_00: 0x20_20_00,
    0x18_00: 0x20_20_08,
    0x19_00: 0x0,
    0x1a_00: 0x8,
    0x1b_00: 0x10_20_00_00,
    0x1c_00: 0x20_00,
    0x1d_00: 0x10_00_20_08,
    0x1e_00: 0x10_20_20_00,
    0x1f_00: 0x20_00_08,
    0x10_80: 0x8,
    0x11_80: 0x20_20_00,
    0x12_80: 0x20_00_00,
    0x13_80: 0x10_00_00_08,
    0x14_80: 0x10_00_20_00,
    0x15_80: 0x20_08,
    0x16_80: 0x10_20_20_08,
    0x17_80: 0x10_20_00_00,
    0x18_80: 0x10_20_20_00,
    0x19_80: 0x10_20_00_08,
    0x1a_80: 0x20_00,
    0x1b_80: 0x20_20_08,
    0x1c_80: 0x20_00_08,
    0x1d_80: 0x0,
    0x1e_80: 0x10_00_00_00,
    0x1f_80: 0x10_00_20_08
  },
  {
    0x0: 0x10_00_00,
    0x10: 0x2_00_04_01,
    0x20: 0x4_00,
    0x30: 0x10_04_01,
    0x40: 0x2_10_04_01,
    0x50: 0x0,
    0x60: 0x1,
    0x70: 0x2_10_00_01,
    0x80: 0x2_00_04_00,
    0x90: 0x10_00_01,
    0xa0: 0x2_00_00_01,
    0xb0: 0x2_10_04_00,
    0xc0: 0x2_10_00_00,
    0xd0: 0x4_01,
    0xe0: 0x10_04_00,
    0xf0: 0x2_00_00_00,
    0x8: 0x2_10_00_01,
    0x18: 0x0,
    0x28: 0x2_00_04_01,
    0x38: 0x2_10_04_00,
    0x48: 0x10_00_00,
    0x58: 0x2_00_00_01,
    0x68: 0x2_00_00_00,
    0x78: 0x4_01,
    0x88: 0x10_04_01,
    0x98: 0x2_00_04_00,
    0xa8: 0x2_10_00_00,
    0xb8: 0x10_00_01,
    0xc8: 0x4_00,
    0xd8: 0x2_10_04_01,
    0xe8: 0x1,
    0xf8: 0x10_04_00,
    0x1_00: 0x2_00_00_00,
    0x1_10: 0x10_00_00,
    0x1_20: 0x2_00_04_01,
    0x1_30: 0x2_10_00_01,
    0x1_40: 0x10_00_01,
    0x1_50: 0x2_00_04_00,
    0x1_60: 0x2_10_04_00,
    0x1_70: 0x10_04_01,
    0x1_80: 0x4_01,
    0x1_90: 0x2_10_04_01,
    0x1_a0: 0x10_04_00,
    0x1_b0: 0x1,
    0x1_c0: 0x0,
    0x1_d0: 0x2_10_00_00,
    0x1_e0: 0x2_00_00_01,
    0x1_f0: 0x4_00,
    0x1_08: 0x10_04_00,
    0x1_18: 0x2_00_04_01,
    0x1_28: 0x2_10_00_01,
    0x1_38: 0x1,
    0x1_48: 0x2_00_00_00,
    0x1_58: 0x10_00_00,
    0x1_68: 0x4_01,
    0x1_78: 0x2_10_04_00,
    0x1_88: 0x2_00_00_01,
    0x1_98: 0x2_10_00_00,
    0x1_a8: 0x0,
    0x1_b8: 0x2_10_04_01,
    0x1_c8: 0x10_04_01,
    0x1_d8: 0x4_00,
    0x1_e8: 0x2_00_04_00,
    0x1_f8: 0x10_00_01
  },
  {
    0x0: 0x8_00_08_20,
    0x1: 0x2_00_00,
    0x2: 0x8_00_00_00,
    0x3: 0x20,
    0x4: 0x2_00_20,
    0x5: 0x8_02_08_20,
    0x6: 0x8_02_08_00,
    0x7: 0x8_00,
    0x8: 0x8_02_00_00,
    0x9: 0x8_00_08_00,
    0xa: 0x2_08_00,
    0xb: 0x8_02_00_20,
    0xc: 0x8_20,
    0xd: 0x0,
    0xe: 0x8_00_00_20,
    0xf: 0x2_08_20,
    0x80_00_00_00: 0x8_00,
    0x80_00_00_01: 0x8_02_08_20,
    0x80_00_00_02: 0x8_00_08_20,
    0x80_00_00_03: 0x8_00_00_00,
    0x80_00_00_04: 0x8_02_00_00,
    0x80_00_00_05: 0x2_08_00,
    0x80_00_00_06: 0x2_08_20,
    0x80_00_00_07: 0x20,
    0x80_00_00_08: 0x8_00_00_20,
    0x80_00_00_09: 0x8_20,
    0x80_00_00_0a: 0x2_00_20,
    0x80_00_00_0b: 0x8_02_08_00,
    0x80_00_00_0c: 0x0,
    0x80_00_00_0d: 0x8_02_00_20,
    0x80_00_00_0e: 0x8_00_08_00,
    0x80_00_00_0f: 0x2_00_00,
    0x10: 0x2_08_20,
    0x11: 0x8_02_08_00,
    0x12: 0x20,
    0x13: 0x8_00,
    0x14: 0x8_00_08_00,
    0x15: 0x8_00_00_20,
    0x16: 0x8_02_00_20,
    0x17: 0x2_00_00,
    0x18: 0x0,
    0x19: 0x2_00_20,
    0x1a: 0x8_02_00_00,
    0x1b: 0x8_00_08_20,
    0x1c: 0x8_02_08_20,
    0x1d: 0x2_08_00,
    0x1e: 0x8_20,
    0x1f: 0x8_00_00_00,
    0x80_00_00_10: 0x2_00_00,
    0x80_00_00_11: 0x8_00,
    0x80_00_00_12: 0x8_02_00_20,
    0x80_00_00_13: 0x2_08_20,
    0x80_00_00_14: 0x20,
    0x80_00_00_15: 0x8_02_00_00,
    0x80_00_00_16: 0x8_00_00_00,
    0x80_00_00_17: 0x8_00_08_20,
    0x80_00_00_18: 0x8_02_08_20,
    0x80_00_00_19: 0x8_00_00_20,
    0x80_00_00_1a: 0x8_00_08_00,
    0x80_00_00_1b: 0x0,
    0x80_00_00_1c: 0x2_08_00,
    0x80_00_00_1d: 0x8_20,
    0x80_00_00_1e: 0x2_00_20,
    0x80_00_00_1f: 0x8_02_08_00
  }
];

// Masks that select the SBOX input
const SBOX_MASK = [
  0xf8_00_00_01, 0x1f_80_00_00, 0x01_f8_00_00, 0x00_1f_80_00, 0x00_01_f8_00,
  0x00_00_1f_80, 0x00_00_01_f8, 0x80_00_00_1f
];

export class DESAlgo extends BlockCipher {
  public static keySize = 64 / 32;
  public static ivSize = 64 / 32;
  blockSize = 64 / 32;
  private _subKeys!: number[][];
  private _invSubKeys!: number[][];
  public _lBlock!: number;
  public _rBlock!: number;
  constructor(
    xformMode: number,
    key: WordArray,
    cfg?: BufferedBlockAlgorithmConfig
  ) {
    super(xformMode, key, cfg);
  }
  private exchangeRL(offset: number, mask: number): void {
    const t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
    this._lBlock ^= t;
    this._rBlock ^= t << offset;
  }

  public encryptBlock(M: number[], offset: number): void {
    this._doCryptBlock(M, offset, this._subKeys);
  }

  public decryptBlock(M: number[], offset: number): void {
    this._doCryptBlock(M, offset, this._invSubKeys);
  }

  reset(): void {
    super.reset();
    const key = this._key;
    const keyWords = key.words;

    // Select 56 bits according to PC1
    const keyBits = [];
    for (let i = 0; i < 56; i++) {
      const keyBitPos = PC1[i] - 1;
      keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - (keyBitPos % 32))) & 1;
    }

    // Assemble 16 subkeys
    const subKeys: number[][] = (this._subKeys = []);
    for (let nSubKey = 0; nSubKey < 16; nSubKey++) {
      // Create subkey
      const subKey: number[] = (subKeys[nSubKey] = []);

      // Shortcut
      const bitShift = BIT_SHIFTS[nSubKey];

      // Select 48 bits according to PC2
      for (let i = 0; i < 24; i++) {
        // Select from the left 28 key bits
        // eslint-disable-next-line unicorn/prefer-math-trunc
        subKey[(i / 6) | 0] |=
          keyBits[(PC2[i] - 1 + bitShift) % 28] << (31 - (i % 6));

        // Select from the right 28 key bits
        // eslint-disable-next-line unicorn/prefer-math-trunc
        subKey[4 + ((i / 6) | 0)] |=
          keyBits[28 + ((PC2[i + 24] - 1 + bitShift) % 28)] << (31 - (i % 6));
      }

      // Since each subkey is applied to an expanded 32-bit input,
      // the subkey can be broken into 8 values scaled to 32-bits,
      // which allows the key to be used without expansion
      subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
      for (let i = 1; i < 7; i++) {
        subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
      }
      subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
    }

    // Compute inverse subkeys
    const invSubKeys: number[][] = (this._invSubKeys = []);
    for (let i = 0; i < 16; i++) {
      invSubKeys[i] = subKeys[15 - i];
    }
  }
  private exchangeLR(offset: number, mask: number): void {
    const t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
    this._rBlock ^= t;
    this._lBlock ^= t << offset;
  }

  _doCryptBlock(M: number[], offset: number, subKeys: number[][]): void {
    // Get input
    this._lBlock = M[offset];
    this._rBlock = M[offset + 1];

    // Initial permutation
    this.exchangeLR(4, 0x0f_0f_0f_0f);
    this.exchangeLR(16, 0x00_00_ff_ff);
    this.exchangeRL(2, 0x33_33_33_33);
    this.exchangeRL(8, 0x00_ff_00_ff);
    this.exchangeLR(1, 0x55_55_55_55);

    // Rounds
    for (let round = 0; round < 16; round++) {
      // Shortcuts
      const subKey = subKeys[round];
      const lBlock = this._lBlock;
      const rBlock = this._rBlock;

      // Feistel function
      let f = 0;
      for (let i = 0; i < 8; i++) {
        f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
      }
      this._lBlock = rBlock;
      this._rBlock = lBlock ^ f;
    }

    // Undo swap from last round
    const t = this._lBlock;
    this._lBlock = this._rBlock;
    this._rBlock = t;

    // Final permutation
    this.exchangeLR(1, 0x55_55_55_55);
    this.exchangeRL(8, 0x00_ff_00_ff);
    this.exchangeRL(2, 0x33_33_33_33);
    this.exchangeLR(16, 0x00_00_ff_ff);
    this.exchangeLR(4, 0x0f_0f_0f_0f);

    // Set output
    M[offset] = this._lBlock;
    M[offset + 1] = this._rBlock;
  }
}

export class TripleDESAlgo extends BlockCipher {
  public static keySize = 192 / 32;
  public static ivSize = 64 / 32;
  blockSize = 64 / 32;
  private _des1!: BlockCipher;
  private _des2!: BlockCipher;
  private _des3!: BlockCipher;

  constructor(
    xformMode: number,
    key: WordArray,
    cfg?: BufferedBlockAlgorithmConfig
  ) {
    super(xformMode, key, cfg);
  }
  public encryptBlock(M: number[], offset: number): void {
    this._des1.encryptBlock(M, offset);
    this._des2.decryptBlock(M, offset);
    this._des3.encryptBlock(M, offset);
  }
  public decryptBlock(M: number[], offset: number): void {
    this._des3.decryptBlock(M, offset);
    this._des2.encryptBlock(M, offset);
    this._des1.decryptBlock(M, offset);
  }

  reset(): void {
    super.reset();

    const key = this._key;
    const keyWords = key.words;
    // Make sure the key length is valid (64, 128 or >= 192 bit)
    if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
      throw new Error(
        "Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192."
      );
    }

    // Extend the key according to the keying options defined in 3DES standard
    const key1 = keyWords.slice(0, 2);
    const key2 =
      keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
    const key3 =
      keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);

    // Create DES instances
    this._des1 = DESAlgo.createEncryptor(
      new WordArray(key1),
      {}
    ) as BlockCipher;
    this._des2 = DESAlgo.createEncryptor(
      new WordArray(key2),
      {}
    ) as BlockCipher;
    this._des3 = DESAlgo.createEncryptor(
      new WordArray(key3),
      {}
    ) as BlockCipher;
  }
}
